// Mineflayer bot script for Minecraft 1.21.5
// Connects to TESTWorld182.aternos.me:53373 with username "bot".
// Assumes Node.js and mineflayer (plus dependencies) are installed in Termux.

const mineflayer = require('mineflayer');
const Vec3 = require('vec3').Vec3;

// -----------------------------------------------------------------------------
// Patch 1: Safe Vec3.add to avoid crashing on undefined input
// If an undefined or invalid vector is added, return the original vector.
const originalVec3Add = Vec3.prototype.add;
Vec3.prototype.add = function (v) {
  if (!v || typeof v.x !== 'number' || typeof v.y !== 'number' || typeof v.z !== 'number') {
    // Invalid vector: ignore addition to prevent crash
    return this;
  }
  return originalVec3Add.call(this, v);
};

// -----------------------------------------------------------------------------
// Patch 2: Safe enchantment reading to bypass NBT errors
// Preload prismarine-item with version 1.21.5 and wrap its enchantment getter
try {
  const Item = require('prismarine-item')('1.21.5');
  const enchantDescriptor = Object.getOwnPropertyDescriptor(Item.prototype, 'enchants');
  if (enchantDescriptor) {
    Object.defineProperty(Item.prototype, 'enchants', {
      get: function () {
        try {
          // Original enchantment parsing
          return enchantDescriptor.get.call(this);
        } catch (err) {
          // On error (new NBT format in 1.21.5), strip enchantment tags and return empty list
          if (this.nbt) {
            delete this.nbt.Enchantments;
            delete this.nbt.enchantments;
          }
          return [];
        }
      },
      set: enchantDescriptor.set
    });
  }
} catch (e) {
  console.warn('Failed to patch enchantment NBT handling:', e);
}

// -----------------------------------------------------------------------------
// Function to create and start the bot (and to restart it on disconnect)
function startBot() {
  const bot = mineflayer.createBot({
    host: 'TESTWorld182.aternos.me',
    port: 53373,
    username: 'bot',
    version: '1.21.5',   // specify Minecraft version for compatibility
  });

  // Log basic events
  bot.on('spawn', () => {
    console.log('Bot spawned in the world.');
    // Example action on spawn: say hello (comment out if not needed)
    // bot.chat('Hello, I am ready!');
  });

  // Disconnect/reconnect handling
  bot.on('end', () => {
    console.log('Bot disconnected. Attempting to reconnect in 5s...');
    setTimeout(startBot, 5000);
  });
  bot.on('kicked', (reason) => {
    console.log('Bot was kicked from the server. Reason:', reason);
  });
  bot.on('error', (err) => {
    console.error('Bot encountered an error:', err);
  });

  // ---------------------------------------------------------------------------
  // Movement safeguard: track last position each physics tick
  let lastPos = null;
  bot.on('physicsTick', () => {
    const pos = bot.entity.position;
    if (lastPos) {
      const dx = pos.x - lastPos.x;
      const dy = pos.y - lastPos.y;
      const dz = pos.z - lastPos.z;
      // If moved more than ~1 block in any direction in one tick, clear movement
      if (Math.abs(dx) > 1 || Math.abs(dy) > 1 || Math.abs(dz) > 1) {
        bot.clearControlStates();
      }
    }
    lastPos = pos.clone();
  });

  // Additional bot behavior can be added here, e.g. responding to chat, pathfinding, etc.
}

// Start the bot for the first time
startBot();
