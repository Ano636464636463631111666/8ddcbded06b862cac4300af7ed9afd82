const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const Vec3 = require('vec3');
const { GoalNear } = goals;
const { once } = require('events');

const bot = mineflayer.createBot({
  host: 'TESTWorld182.aternos.me',
  port: 53373,
  username: 'bot',
  version: '1.21.5',
  auth: 'offline'
});

bot.loadPlugin(pathfinder);

const attackCounts = new Map();

bot.once('spawn', () => {
  const defaultMove = new Movements(bot);
  bot.pathfinder.setMovements(defaultMove);
  bot.chat('Bot spawned and ready!');
});

bot.on('chat', async (username, message) => {
  if (username === bot.username) return;

  const msg = message.toLowerCase();

  if (msg.includes('hello') || msg.includes('hi')) {
    bot.chat(`Hello ${username}!`);
  } else if (msg.includes('how are you')) {
    bot.chat("I'm just a bot, but thanks for asking!");
  } else if (msg.includes('joke')) {
    bot.chat("Why don't skeletons fight each other? They don't have the guts!");
  } else if (msg === 'disconnect') {
    bot.chat('Disconnecting as requested.');
    bot.quit();
  } else if (msg.startsWith('mine ')) {
    const blockName = msg.slice(5).trim();
    bot.chat(`Trying to mine ${blockName}...`);
    await mineBlockByName(blockName);
  } else if (msg.startsWith('craft ')) {
    const itemName = msg.slice(6).trim();
    if (itemName === 'crafting table' || itemName === 'table') {
      await craftCraftingTable();
    } else {
      bot.chat(`Sorry, I can't craft ${itemName} yet.`);
    }
  }
});

bot.on('entityHurt', (entity) => {
  if (entity === bot.entity) {
    const attacker = bot.players[entity.lastHurtBy]?.entity;
    if (attacker && attacker.mobType) {
      const mobName = attacker.mobType || attacker.name || 'something';
      bot.chat(`I'm being attacked by ${mobName}!`);

      const count = attackCounts.get(attacker.id) || 0;
      attackCounts.set(attacker.id, count + 1);

      if (attackCounts.get(attacker.id) >= 3) {
        bot.chat(`That's it! I'm fighting back against ${mobName}!`);
        bot.pathfinder.setGoal(new GoalNear(attacker.position.x, attacker.position.y, attacker.position.z, 1));
        bot.attack(attacker);
      }
    }
  }
});

bot.on('physicTick', () => {
  // Avoid lava/fire silently
  const lavaNearby = bot.findBlock({
    matching: block => block.name.includes('lava') || block.name.includes('fire'),
    maxDistance: 3
  });

  if (lavaNearby) {
    const opposite = bot.entity.position.minus(lavaNearby.position);
    const safePos = bot.entity.position.plus(opposite.scaled(3));
    bot.pathfinder.setGoal(new GoalNear(safePos.x, safePos.y, safePos.z, 1));
    return;
  }

  // Creeper panic
  const creepers = Object.values(bot.entities).filter(e => e.mobType === 'Creeper' && e.position.distanceTo(bot.entity.position) < 6);

  if (creepers.length > 0) {
    const away = bot.entity.position.minus(creepers[0].position);
    const runTo = bot.entity.position.plus(away.scaled(5));
    bot.pathfinder.setGoal(new GoalNear(runTo.x, runTo.y, runTo.z, 1));
    if (creepers.length === 1) {
      bot.chat('Ahhh, creeper!');
    } else {
      bot.chat('Ahhh, creepers!');
    }
  }
});

// Helper function to mine a block by name
async function mineBlockByName(name) {
  const block = bot.findBlock({
    matching: b => b.name === name,
    maxDistance: 32
  });

  if (!block) {
    bot.chat(`I can't find any ${name} nearby.`);
    return;
  }

  try {
    await bot.pathfinder.goto(new GoalNear(block.position.x, block.position.y, block.position.z, 1));
    await bot.dig(block);
    bot.chat(`Mined some ${name}!`);
  } catch (err) {
    bot.chat(`Failed to mine ${name}: ${err.message}`);
  }
}

// Helper function to craft a crafting table if possible
async function craftCraftingTable() {
  const craftingTableId = 58; // Minecraft ID for crafting table
  const recipe = bot.recipesFor(craftingTableId, null, 1)[0];

  if (!recipe) {
    bot.chat("I don't know how to craft a crafting table.");
    return;
  }

  try {
    await bot.craft(recipe, 1, null);
    bot.chat('Crafted a crafting table!');
  } catch (err) {
    bot.chat('Failed to craft a crafting table: ' + err.message);
  }
}
