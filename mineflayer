const mineflayer = require('mineflayer');
const Vec3 = require('vec3').Vec3;

// Vec3 fix
const originalVec3Add = Vec3.prototype.add;
Vec3.prototype.add = function (v) {
  if (!v || typeof v.x !== 'number') return this;
  return originalVec3Add.call(this, v);
};

// Enchant fix
try {
  const Item = require('prismarine-item')('1.21.5');
  const desc = Object.getOwnPropertyDescriptor(Item.prototype, 'enchants');
  if (desc) {
    Object.defineProperty(Item.prototype, 'enchants', {
      get() { try { return desc.get.call(this); } catch { return []; } },
      set: desc.set
    });
  }
} catch {}

// Start bot
function startBot() {
  const bot = mineflayer.createBot({
    host: 'TESTWorld182.aternos.me',
    port: 53373,
    username: 'bot',
    version: '1.21.5'
  });

  bot.on('spawn', () => {
    console.log('Bot spawned.');
    bot.chat('Hello world!');

    // Look around slowly to avoid invalid movement kicks
    setInterval(() => {
      const yaw = bot.entity.yaw + 0.1;
      bot.look(yaw, bot.entity.pitch, false);
    }, 1000);
  });

  // Follow nearest player safely
  setInterval(() => {
    const player = Object.values(bot.players).find(p => p.username !== bot.username && p.entity);
    if (player) {
      const targetPos = player.entity.position;
      if (bot.entity.position.distanceTo(targetPos) > 2) {
        // Move toward player in small safe steps
        bot.setControlState('forward', true);
        setTimeout(() => bot.clearControlStates(), 200);
      }
    }
  }, 2000);

  // Kick/reconnect handling
  bot.on('end', () => setTimeout(startBot, 5000));
  bot.on('kicked', r => console.log('Kicked:', r));
  bot.on('error', e => console.log('Error:', e));
}

startBot();
